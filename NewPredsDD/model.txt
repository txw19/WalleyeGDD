
    model {
    
    
    # Likelihood: 
    # Level-1 of the model
    for (i in 1:n){ 
    y[i] ~ dbin(p[i],1)				# distributional assumption
    p[i] <- exp(lp[i])/(1+exp(lp[i])) # logit link function
    lp[i] <- alpha[group[i]] + beta[group[i]] * x[i]	# linear predictor    
    } 
    
    
    # Level-2 of the model
    for(j in 1:J){
    alpha[j] <- BB[j,1]
    beta[j] <- BB[j,2]
    
    BB[j,1:K] ~ dmnorm(BB.hat[j,], Tau.B[,]) # bivriate normal
    
    BB.hat[j,1] <- mu.alpha + gamma0b * z1[j] + gamma0b2 * z2[j] + gamma0b3 * z3[j] + gamma0b4 * z4[j]
    BB.hat[j,2] <- mu.beta + gamma1b * z1[j] + gamma1b2 * z2[j] + gamma1b3 * z3[j] + gamma1b4 * z4[j]
    }
    
    
    mu.alpha ~ dnorm(0, 0.0001)
    mu.beta ~ dnorm(0, 0.0001)
    gamma0b ~ dnorm(0, 0.0001)
    gamma0b2 ~ dnorm(0, 0.0001)
    gamma0b3 ~ dnorm(0, 0.0001)
    gamma0b4 ~ dnorm(0, 0.0001)
    gamma1b ~ dnorm(0, 0.0001)
    gamma1b2 ~ dnorm(0, 0.0001)
    gamma1b3 ~ dnorm(0, 0.0001)
    gamma1b4 ~ dnorm(0, 0.0001)
    
    
    ### Model variance-covariance
    Tau.B[1:K,1:K] ~ dwish(W[,], df)
    df <- K+1
    Sigma.B[1:K,1:K] <- inverse(Tau.B[,])
    for (k in 1:K){
    for (k.prime in 1:K){
    rho.B[k,k.prime] <- Sigma.B[k,k.prime]/
    sqrt(Sigma.B[k,k]*Sigma.B[k.prime,k.prime])
    }
    sigma.B[k] <- sqrt(Sigma.B[k,k])
    }
    
    } # end model
    
